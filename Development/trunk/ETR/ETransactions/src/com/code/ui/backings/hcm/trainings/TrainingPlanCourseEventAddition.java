package com.code.ui.backings.hcm.trainings;

import java.util.List;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;

import com.code.dal.orm.hcm.trainings.TrainingCourseData;
import com.code.dal.orm.hcm.trainings.TrainingCourseEventAllocationData;
import com.code.dal.orm.hcm.trainings.TrainingCourseEventData;
import com.code.dal.orm.hcm.trainings.TrainingUnitData;
import com.code.dal.orm.hcm.trainings.TrainingYear;
import com.code.enums.FlagsEnum;
import com.code.enums.TrainingCourseEventStatusEnum;
import com.code.enums.TrainingTypesEnum;
import com.code.exceptions.BusinessException;
import com.code.services.hcm.TrainingCoursesEventsService;
import com.code.services.hcm.TrainingCoursesService;
import com.code.services.hcm.TrainingSetupService;
import com.code.services.util.HijriDateService;
import com.code.ui.backings.base.BaseBacking;

@ManagedBean(name = "trainingPlanCourseEventAddition")
@ViewScoped
public class TrainingPlanCourseEventAddition extends BaseBacking {
    private List<TrainingYear> trainingYears;
    private List<TrainingUnitData> trainingUnits;
    protected List<TrainingCourseEventAllocationData> externalPartiesAllocations;
    protected List<TrainingCourseEventAllocationData> regionsAllocations;

    private TrainingCourseEventData courseEvent;

    private long selectedCourseId;
    private long selectedTrainingUnitId;
    private long selectedTrainingYearId;

    private int pageSize = 15;

    public TrainingPlanCourseEventAddition() {
	try {
	    trainingYears = TrainingSetupService.getApprovedTrainingYears();
	    trainingUnits = TrainingSetupService.getAllTrainingUnitsData();
	    reset();
	} catch (BusinessException e) {
	    setServerSideErrorMessages(getParameterizedMessage(e.getMessage(), e.getParams()));
	}
    }

    public void reset() {
	courseEvent = new TrainingCourseEventData();
	regionsAllocations = null;
	externalPartiesAllocations = null;
	selectedCourseId = FlagsEnum.ALL.getCode();
    }

    public void selectCourse() {
	try {
	    TrainingCourseData course = TrainingCoursesService.getTrainingCoursesById(selectedCourseId);
	    courseEvent.setCourseId(course.getId());
	    courseEvent.setCourseName(course.getName());
	    courseEvent.setWeeksCount(course.getWeeksCount());
	    courseEvent.setCandidatesMin(course.getCandidatesMin());
	    courseEvent.setCandidatesMax(course.getCandidatesMax());
	    courseEvent.setPrerquisites(course.getPrerquisites());
	    courseEvent.setTrainingYearId(selectedTrainingYearId);
	    courseEvent.setTrainingUnitId(selectedTrainingUnitId);
	    courseEvent.setTrainingTypeId(TrainingTypesEnum.INTERNAL_MILITARY_COURSE.getCode());

	    if (TrainingCoursesEventsService.checkCourseEventForAutoGenerate(selectedTrainingUnitId, selectedCourseId))
		courseEvent.setAutoGeneratedSerialFlag(FlagsEnum.ON.getCode());
	    else
		courseEvent.setAutoGeneratedSerialFlag(FlagsEnum.OFF.getCode());

	    courseEvent.setStatus(TrainingCourseEventStatusEnum.PLANNED_TO_BE_HELD.getCode());
	    courseEvent.setMigFlag(FlagsEnum.OFF.getCode());
	    courseEvent.setEflag(FlagsEnum.OFF.getCode());

	    externalPartiesAllocations = TrainingCoursesEventsService.constructExternalPartiesCourseAllocations(selectedTrainingYearId, selectedTrainingUnitId, null, true);
	    regionsAllocations = TrainingCoursesEventsService.constructRegionsCourseAllocations(null);
	} catch (BusinessException e) {
	    setServerSideErrorMessages(getParameterizedMessage(e.getMessage(), e.getParams()));
	}
    }

    public void manipulateEndDate() {
	try {
	    if (courseEvent.getPlannedStartDateString() != null && (courseEvent.getWeeksCount() != null && courseEvent.getWeeksCount() > 0))
		courseEvent.setPlannedEndDateString(TrainingCoursesEventsService.manipulateDateNeglectWeekend(HijriDateService.addSubStringHijriDays(courseEvent.getPlannedStartDateString(), (courseEvent.getWeeksCount() * 7) - 1)));
	} catch (BusinessException e) {
	    setServerSideErrorMessages(getParameterizedMessage(e.getMessage(), e.getParams()));
	}
    }

    public void save() {
	try {
	    validateAllocationsValue();
	    courseEvent.setActualStartDate(courseEvent.getPlannedStartDate());
	    courseEvent.setActualEndDate(courseEvent.getPlannedEndDate());

	    if (courseEvent.getAutoGeneratedSerialFlag() == FlagsEnum.ON.getCode()) {
		TrainingCourseEventData lastCourseEvent = TrainingCoursesEventsService.getLastGeneratedCourseEvent(courseEvent.getTrainingUnitId(), courseEvent.getCourseId());
		courseEvent.setSerial(lastCourseEvent.getSerial() + 1);
	    }

	    courseEvent.getTrainingCourseEvent().setSystemUser(this.loginEmpData.getEmpId() + ""); // For Auditing.
	    if (regionsAllocations != null)
		for (TrainingCourseEventAllocationData trainingCourseEventAllocation : regionsAllocations)
		    trainingCourseEventAllocation.getTrainingCourseEventAllocation().setSystemUser(this.loginEmpData.getEmpId() + ""); // For Auditing.

	    if (externalPartiesAllocations != null)
		for (TrainingCourseEventAllocationData trainingCourseEventAllocation : externalPartiesAllocations)
		    trainingCourseEventAllocation.getTrainingCourseEventAllocation().setSystemUser(this.loginEmpData.getEmpId() + ""); // For Auditing.

	    TrainingCoursesEventsService.addTrainingCourseEventForTrainingPlan(courseEvent, null, regionsAllocations, externalPartiesAllocations, loginEmpData.getEmpId());
	    setServerSideSuccessMessages(getMessage("notify_successOperation"));
	} catch (BusinessException e) {
	    setServerSideErrorMessages(getParameterizedMessage(e.getMessage(), e.getParams()));
	}
    }

    private void validateAllocationsValue() throws BusinessException {
	boolean allocationsHasValueFlag = false;
	for (TrainingCourseEventAllocationData allocation : regionsAllocations) {
	    if (allocation.getAllocationCount() != null || (allocation.getAllocationDesc() != null && !allocation.getAllocationDesc().trim().isEmpty())) {
		allocationsHasValueFlag = true;
		break;
	    }
	}
	if (allocationsHasValueFlag)
	    return;

	for (TrainingCourseEventAllocationData allocation : externalPartiesAllocations) {
	    if (allocation.getAllocationCount() != null) {
		allocationsHasValueFlag = true;
		break;
	    }
	}
	if (!allocationsHasValueFlag)
	    throw new BusinessException("error_courseEventAllocationsMustHaveAtLeastOne", new Object[] { "" });

    }

    public List<TrainingYear> getTrainingYears() {
	return trainingYears;
    }

    public void setTrainingYears(List<TrainingYear> trainingYears) {
	this.trainingYears = trainingYears;
    }

    public List<TrainingUnitData> getTrainingUnits() {
	return trainingUnits;
    }

    public void setTrainingUnits(List<TrainingUnitData> trainingUnits) {
	this.trainingUnits = trainingUnits;
    }

    public List<TrainingCourseEventAllocationData> getExternalPartiesAllocations() {
	return externalPartiesAllocations;
    }

    public void setExternalPartiesAllocations(List<TrainingCourseEventAllocationData> externalPartiesAllocations) {
	this.externalPartiesAllocations = externalPartiesAllocations;
    }

    public List<TrainingCourseEventAllocationData> getRegionsAllocations() {
	return regionsAllocations;
    }

    public void setRegionsAllocations(List<TrainingCourseEventAllocationData> regionsAllocations) {
	this.regionsAllocations = regionsAllocations;
    }

    public TrainingCourseEventData getCourseEvent() {
	return courseEvent;
    }

    public void setCourseEvent(TrainingCourseEventData courseEvent) {
	this.courseEvent = courseEvent;
    }

    public long getSelectedCourseId() {
	return selectedCourseId;
    }

    public void setSelectedCourseId(long selectedCourseId) {
	this.selectedCourseId = selectedCourseId;
    }

    public long getSelectedTrainingUnitId() {
	return selectedTrainingUnitId;
    }

    public void setSelectedTrainingUnitId(long selectedTrainingUnitId) {
	this.selectedTrainingUnitId = selectedTrainingUnitId;
    }

    public long getSelectedTrainingYearId() {
	return selectedTrainingYearId;
    }

    public void setSelectedTrainingYearId(long selectedTrainingYearId) {
	this.selectedTrainingYearId = selectedTrainingYearId;
    }

    public int getPageSize() {
	return pageSize;
    }

    public void setPageSize(int pageSize) {
	this.pageSize = pageSize;
    }
}
