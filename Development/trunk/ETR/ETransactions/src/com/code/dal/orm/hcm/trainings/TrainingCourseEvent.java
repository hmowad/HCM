package com.code.dal.orm.hcm.trainings;

import java.util.Date;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.NamedQueries;
import org.hibernate.annotations.NamedQuery;

import com.code.dal.audit.DeletableAuditEntity;
import com.code.dal.audit.InsertableAuditEntity;
import com.code.dal.audit.UpdatableAuditEntity;
import com.code.dal.orm.AuditEntity;

@NamedQueries({
	@NamedQuery(name = "hcm_trainingCourseEvent_countTrainingCoursesEventsNotInTrainingYearInterval",
		query = " select count(e.id) from TrainingCourseEvent e" +
			" where e.trainingYearId = :P_TRAINING_YEAR_ID " +
			" and (e.actualStartDate not between to_date(:P_YEAR_START_DATE, 'MI/MM/YYYY') and to_date(:P_YEAR_END_DATE, 'MI/MM/YYYY') " +
			"   or e.actualEndDate not between to_date(:P_YEAR_START_DATE, 'MI/MM/YYYY') and to_date(:P_YEAR_END_DATE, 'MI/MM/YYYY'))")

})
@Entity
@Table(name = "HCM_TRN_COURSES_EVENTS")
public class TrainingCourseEvent extends AuditEntity implements InsertableAuditEntity, UpdatableAuditEntity, DeletableAuditEntity {
    private Long id;
    private Long courseId;
    private Long trainingTypeId;
    private Long trainingYearId;
    private Long trainingUnitId;
    private Long externalPartyId;
    private Integer serial;
    private Integer weeksCount;
    private Integer candidatesMin;
    private Integer candidatesMax;
    private String prerquisites;
    private Date plannedStartDate;
    private Date plannedEndDate;
    private Date actualStartDate;
    private Date actualEndDate;
    private Integer status;
    private Integer migFlag;
    private Integer eflag;
    private String attachments;
    private String reasons;
    private Integer autoGeneratedSerialFlag;
    private Integer rankingFlag;

    @SequenceGenerator(name = "HCMTrainingPlanSeq",
	    sequenceName = "HCM_TRN_PLAN_SEQ")
    @GeneratedValue(generator = "HCMTrainingPlanSeq")
    @Id
    @Column(name = "ID")
    public Long getId() {
	return id;
    }

    public void setId(Long id) {
	this.id = id;
    }

    @Basic
    @Column(name = "COURSE_ID")
    public Long getCourseId() {
	return courseId;
    }

    public void setCourseId(Long courseId) {
	this.courseId = courseId;
    }

    @Basic
    @Column(name = "TRAINING_TYPE_ID")
    public Long getTrainingTypeId() {
	return trainingTypeId;
    }

    public void setTrainingTypeId(Long trainingTypeId) {
	this.trainingTypeId = trainingTypeId;
    }

    @Basic
    @Column(name = "TRAINING_YEAR_ID")
    public Long getTrainingYearId() {
	return trainingYearId;
    }

    public void setTrainingYearId(Long trainingYearId) {
	this.trainingYearId = trainingYearId;
    }

    @Basic
    @Column(name = "TRAINING_UNIT_ID")
    public Long getTrainingUnitId() {
	return trainingUnitId;
    }

    public void setTrainingUnitId(Long trainingUnitId) {
	this.trainingUnitId = trainingUnitId;
    }

    @Basic
    @Column(name = "EXTERNAL_PARTY_ID")
    public Long getExternalPartyId() {
	return externalPartyId;
    }

    public void setExternalPartyId(Long externalPartyId) {
	this.externalPartyId = externalPartyId;
    }

    @Basic
    @Column(name = "SERIAL")
    public Integer getSerial() {
	return serial;
    }

    public void setSerial(Integer serial) {
	this.serial = serial;
    }

    @Basic
    @Column(name = "WEEKS_COUNT")
    public Integer getWeeksCount() {
	return weeksCount;
    }

    public void setWeeksCount(Integer weeksCount) {
	this.weeksCount = weeksCount;
    }

    @Basic
    @Column(name = "CANDIDATES_MIN")
    public Integer getCandidatesMin() {
	return candidatesMin;
    }

    public void setCandidatesMin(Integer candidatesMin) {
	this.candidatesMin = candidatesMin;
    }

    @Basic
    @Column(name = "CANDIDATES_MAX")
    public Integer getCandidatesMax() {
	return candidatesMax;
    }

    public void setCandidatesMax(Integer candidatesMax) {
	this.candidatesMax = candidatesMax;
    }

    @Basic
    @Column(name = "PRERQUISITES")
    public String getPrerquisites() {
	return prerquisites;
    }

    public void setPrerquisites(String prerquisites) {
	this.prerquisites = prerquisites;
    }

    @Basic
    @Column(name = "PLANNED_START_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    public Date getPlannedStartDate() {
	return plannedStartDate;
    }

    public void setPlannedStartDate(Date plannedStartDate) {
	this.plannedStartDate = plannedStartDate;
    }

    @Basic
    @Column(name = "PLANNED_END_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    public Date getPlannedEndDate() {
	return plannedEndDate;
    }

    public void setPlannedEndDate(Date plannedEndDate) {
	this.plannedEndDate = plannedEndDate;
    }

    @Basic
    @Column(name = "ACTUAL_START_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    public Date getActualStartDate() {
	return actualStartDate;
    }

    public void setActualStartDate(Date actualStartDate) {
	this.actualStartDate = actualStartDate;
    }

    @Basic
    @Column(name = "ACTUAL_END_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    public Date getActualEndDate() {
	return actualEndDate;
    }

    public void setActualEndDate(Date actualEndDate) {
	this.actualEndDate = actualEndDate;
    }

    @Basic
    @Column(name = "STATUS")
    public Integer getStatus() {
	return status;
    }

    public void setStatus(Integer status) {
	this.status = status;
    }

    @Basic
    @Column(name = "EFLAG")
    public Integer getEflag() {
	return eflag;
    }

    public void setEflag(Integer eflag) {
	this.eflag = eflag;
    }

    @Basic
    @Column(name = "MIG_FLAG")
    public Integer getMigFlag() {
	return migFlag;
    }

    public void setMigFlag(Integer migFlag) {
	this.migFlag = migFlag;
    }

    @Basic
    @Column(name = "ATTACHMENTS")
    public String getAttachments() {
	return attachments;
    }

    public void setAttachments(String attachments) {
	this.attachments = attachments;
    }

    @Basic
    @Column(name = "REASONS")
    public String getReasons() {
	return reasons;
    }

    public void setReasons(String reasons) {
	this.reasons = reasons;
    }

    @Basic
    @Column(name = "AUTO_GENERATED_SERIAL_FLAG")
    public Integer getAutoGeneratedSerialFlag() {
	return autoGeneratedSerialFlag;
    }

    public void setAutoGeneratedSerialFlag(Integer autoGeneratedSerialFlag) {
	this.autoGeneratedSerialFlag = autoGeneratedSerialFlag;
    }

    @Basic
    @Column(name = "RANKING_FLAG")
    public Integer getRankingFlag() {
	return rankingFlag;
    }

    public void setRankingFlag(Integer rankingFlag) {
	this.rankingFlag = rankingFlag;
    }

    @Override
    public Long calculateContentId() {
	return id;
    }

    @Override
    public String calculateContent() {
	return "courseId:" + courseId + AUDIT_SEPARATOR +
		"trainingTypeId:" + trainingTypeId + AUDIT_SEPARATOR +
		"trainingYearId:" + trainingYearId + AUDIT_SEPARATOR +
		"trainingUnitId:" + trainingUnitId + AUDIT_SEPARATOR +
		"externalPartyId:" + externalPartyId + AUDIT_SEPARATOR +
		"serial:" + serial + AUDIT_SEPARATOR +
		"weeksCount:" + weeksCount + AUDIT_SEPARATOR +
		"candidatesMin:" + candidatesMin + AUDIT_SEPARATOR +
		"candidatesMax:" + candidatesMax + AUDIT_SEPARATOR +
		"prerquisites:" + prerquisites + AUDIT_SEPARATOR +
		"plannedStartDate:" + plannedStartDate + AUDIT_SEPARATOR +
		"plannedEndDate:" + plannedEndDate + AUDIT_SEPARATOR +
		"actualStartDate:" + actualStartDate + AUDIT_SEPARATOR +
		"actualEndDate:" + actualEndDate + AUDIT_SEPARATOR +
		"status:" + status + AUDIT_SEPARATOR +
		"migFlag:" + migFlag + AUDIT_SEPARATOR +
		"eflag:" + eflag + AUDIT_SEPARATOR +
		"attachments:" + attachments + AUDIT_SEPARATOR +
		"reasons:" + reasons + AUDIT_SEPARATOR +
		"autoGeneratedSerialFlag:" + autoGeneratedSerialFlag + AUDIT_SEPARATOR +
		"rankingFlag" + rankingFlag + AUDIT_SEPARATOR;
    }
}
