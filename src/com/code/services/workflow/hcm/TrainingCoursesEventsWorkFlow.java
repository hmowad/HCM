package com.code.services.workflow.hcm;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.code.dal.CustomSession;
import com.code.dal.DataAccess;
import com.code.dal.orm.hcm.Rank;
import com.code.dal.orm.hcm.employees.EmployeeData;
import com.code.dal.orm.hcm.trainings.TrainingCourseData;
import com.code.dal.orm.hcm.trainings.TrainingCourseEventData;
import com.code.dal.orm.hcm.trainings.TrainingCourseEventDecisionData;
import com.code.dal.orm.hcm.trainings.TrainingCourseEventDecisionEmployee;
import com.code.dal.orm.hcm.trainings.TrainingTransactionData;
import com.code.dal.orm.hcm.trainings.TrainingTransactionDetailData;
import com.code.dal.orm.hcm.trainings.TrainingYear;
import com.code.dal.orm.workflow.WFInstance;
import com.code.dal.orm.workflow.WFPosition;
import com.code.dal.orm.workflow.WFTask;
import com.code.dal.orm.workflow.hcm.trainings.WFTrainingCourseEventData;
import com.code.dal.orm.workflow.hcm.trainings.WFTrainingData;
import com.code.dal.orm.workflow.hcm.trainings.WFTrainingPlanData;
import com.code.dal.orm.workflow.hcm.trainings.WFTrainingPlanNeedData;
import com.code.enums.CategoriesEnum;
import com.code.enums.EmployeeStatusEnum;
import com.code.enums.FlagsEnum;
import com.code.enums.QueryNamesEnum;
import com.code.enums.RegionsEnum;
import com.code.enums.ReportNamesEnum;
import com.code.enums.TraineeStatusEnum;
import com.code.enums.TrainingCourseEventStatusEnum;
import com.code.enums.TrainingTransactionCategoryEnum;
import com.code.enums.TrainingTypesEnum;
import com.code.enums.TransactionClassesEnum;
import com.code.enums.TransactionTypesEnum;
import com.code.enums.UnitTypesEnum;
import com.code.enums.WFActionFlagsEnum;
import com.code.enums.WFInstanceStatusEnum;
import com.code.enums.WFPositionsEnum;
import com.code.enums.WFProcessesEnum;
import com.code.enums.WFTaskActionsEnum;
import com.code.enums.WFTaskRolesEnum;
import com.code.exceptions.BusinessException;
import com.code.exceptions.DatabaseException;
import com.code.services.config.ETRConfigurationService;
import com.code.services.hcm.EmployeesService;
import com.code.services.hcm.TrainingCoursesEventsService;
import com.code.services.hcm.TrainingCoursesService;
import com.code.services.hcm.TrainingEmployeesService;
import com.code.services.hcm.TrainingSetupService;
import com.code.services.hcm.UnitsService;
import com.code.services.util.CommonService;
import com.code.services.util.HijriDateService;
import com.code.services.workflow.BaseWorkFlow;

/**
 * WorkFlow Service to control the flow of training course events processes.
 */
public class TrainingCoursesEventsWorkFlow extends BaseWorkFlow {
    private final static int NEEDS_COUNT_LIMIT = 99;

    /**
     * Private constructor to prevent instantiation
     */
    private TrainingCoursesEventsWorkFlow() {
    }

    /*********************************************************** WFTrainingPlan ***********************************************************/
    /*---------------------------Work Flow Steps----------------------*/

    public static void initWFTrainingPlan(EmployeeData requester, WFTrainingPlanData wfTrainingPlan, long processId, String taskUrl) throws BusinessException {
	List<TrainingCourseEventData> courseEvents = TrainingCoursesEventsService.getCoursesEventsDataForSerialGeneration(wfTrainingPlan.getTrainingUnitId() != null ? wfTrainingPlan.getTrainingUnitId() : FlagsEnum.ALL.getCode(), wfTrainingPlan.getTrainingYearId());
	List<TrainingCourseEventData> courseEventsAutoGeneratedSerial = new ArrayList<TrainingCourseEventData>();
	List<TrainingCourseEventData> courseEventsNotAutoGenerated = new ArrayList<TrainingCourseEventData>();

	splitTrainingPlanCoursesForSerialGeneration(courseEvents, courseEventsAutoGeneratedSerial, courseEventsNotAutoGenerated);

	validateTrainingPlan(courseEvents, courseEventsNotAutoGenerated, wfTrainingPlan.getTrainingUnitId(), wfTrainingPlan.getTrainingYearId());

	CustomSession session = DataAccess.getSession();
	try {
	    session.beginTransaction();

	    Date curDate = new Date();
	    Date curHijriDate = HijriDateService.getHijriSysDate();

	    WFInstance instance = addWFInstance(processId, requester.getEmpId(), curDate, curHijriDate, WFInstanceStatusEnum.RUNNING.getCode(), null, Arrays.asList(requester.getEmpId()), session);

	    String nextWfRole = WFTaskRolesEnum.SIGN_MANAGER.getCode();
	    if (processId == WFProcessesEnum.TRAINING_PLAN_INITIATION.getCode() || !requester.getPhysicalRegionId().equals(RegionsEnum.GENERAL_DIRECTORATE_OF_BORDER_GUARDS.getCode()))
		nextWfRole = WFTaskRolesEnum.SECONDARY_SIGN_MANAGER.getCode();
	    addWFTask(instance.getInstanceId(), getDelegate(requester.getManagerId(), processId, requester.getEmpId()), requester.getManagerId(), curDate, curHijriDate, taskUrl, nextWfRole, "1", session);

	    wfTrainingPlan.setInstanceId(instance.getInstanceId());

	    DataAccess.addEntity(wfTrainingPlan.getWfTrainingPlan(), session);

	    TrainingCoursesEventsService.generateCourseEventSerialNumbers(courseEventsAutoGeneratedSerial, session);

	    session.commitTransaction();
	} catch (Exception e) {
	    session.rollbackTransaction();
	    wfTrainingPlan.setInstanceId(null);

	    if (e instanceof BusinessException)
		throw (BusinessException) e;

	    e.printStackTrace();
	    throw new BusinessException("error_general");
	} finally {
	    session.close();
	}
    }

    public static void doWFTrainingPlanMR(EmployeeData requester, WFInstance instance, WFTask mrTask, long reviewerEmpId) throws BusinessException {
	try {
	    Date curDate = new Date();
	    Date curHijriDate = HijriDateService.getHijriSysDate();

	    completeWFTask(mrTask, WFTaskActionsEnum.REDIRECT.getCode(), curDate, curHijriDate, instance.getInstanceId(), getDelegate(reviewerEmpId, instance.getProcessId(), requester.getEmpId()), reviewerEmpId, mrTask.getTaskUrl(), WFTaskRolesEnum.REVIEWER_EMP.getCode(), mrTask.getLevel());
	} catch (BusinessException e) {
	    throw e;
	} catch (Exception e) {
	    e.printStackTrace();
	    throw new BusinessException("error_general");
	}
    }

    public static void doWFTrainingPlanRE(EmployeeData requester, WFInstance instance, WFTrainingPlanData wfTrainingPlan, WFTask reTask, boolean isApproved) throws BusinessException {
	List<TrainingCourseEventData> courseEventsAutoGeneratedSerial = new ArrayList<TrainingCourseEventData>();

	if (isApproved && requester.getEmpId().equals(reTask.getOriginalId())) {
	    List<TrainingCourseEventData> courseEvents = TrainingCoursesEventsService.getCoursesEventsDataForSerialGeneration(wfTrainingPlan.getTrainingUnitId() != null ? wfTrainingPlan.getTrainingUnitId() : FlagsEnum.ALL.getCode(), wfTrainingPlan.getTrainingYearId());
	    List<TrainingCourseEventData> courseEventsNotAutoGenerated = new ArrayList<TrainingCourseEventData>();

	    splitTrainingPlanCoursesForSerialGeneration(courseEvents, courseEventsAutoGeneratedSerial, courseEventsNotAutoGenerated);
	    validateTrainingPlan(courseEvents, courseEventsNotAutoGenerated, wfTrainingPlan.getTrainingUnitId(), wfTrainingPlan.getTrainingYearId());
	}

	CustomSession session = DataAccess.getSession();
	try {
	    session.beginTransaction();

	    Date curDate = new Date();
	    Date curHijriDate = HijriDateService.getHijriSysDate();

	    if (isApproved) {
		if (requester.getEmpId().equals(reTask.getOriginalId())) {
		    TrainingCoursesEventsService.generateCourseEventSerialNumbers(courseEventsAutoGeneratedSerial, session);
		}
		DataAccess.updateEntity(wfTrainingPlan.getWfTrainingPlan(), session);
		EmployeeData trainingManager = EmployeesService.getEmployeeDirectManager(reTask.getOriginalId());
		completeWFTask(reTask, WFTaskActionsEnum.REVIEW.getCode(), curDate, curHijriDate, instance.getInstanceId(), getDelegate(trainingManager.getEmpId(), instance.getProcessId(), requester.getEmpId()), trainingManager.getEmpId(), reTask.getTaskUrl(), WFTaskRolesEnum.SIGN_MANAGER.getCode(), reTask.getLevel(), session);
	    } else {
		closeWFInstanceByAction(requester.getEmpId(), instance, reTask, WFTaskActionsEnum.REJECT.getCode(), null, session);
	    }

	    session.commitTransaction();
	} catch (BusinessException e) {
	    session.rollbackTransaction();
	    throw e;
	} catch (Exception e) {
	    e.printStackTrace();
	    session.rollbackTransaction();
	    throw new BusinessException("error_general");
	} finally {
	    session.close();
	}
    }

    public static void doWFTrainingPlanSRE(EmployeeData requester, WFTrainingPlanData wfTrainingPlan, WFInstance instance, WFTask sreTask, boolean isApproved) throws BusinessException {
	List<TrainingCourseEventData> courseEventsAutoGeneratedSerial = new ArrayList<TrainingCourseEventData>();

	if (isApproved) {
	    List<TrainingCourseEventData> courseEvents = TrainingCoursesEventsService.getCoursesEventsDataForSerialGeneration(wfTrainingPlan.getTrainingUnitId() != null ? wfTrainingPlan.getTrainingUnitId() : FlagsEnum.ALL.getCode(), wfTrainingPlan.getTrainingYearId());
	    List<TrainingCourseEventData> courseEventsNotAutoGenerated = new ArrayList<TrainingCourseEventData>();

	    splitTrainingPlanCoursesForSerialGeneration(courseEvents, courseEventsAutoGeneratedSerial, courseEventsNotAutoGenerated);
	    validateTrainingPlan(courseEvents, courseEventsNotAutoGenerated, wfTrainingPlan.getTrainingUnitId(), wfTrainingPlan.getTrainingYearId());
	}

	CustomSession session = DataAccess.getSession();
	try {
	    session.beginTransaction();

	    Date curDate = new Date();
	    Date curHijriDate = HijriDateService.getHijriSysDate();

	    if (isApproved) {
		TrainingCoursesEventsService.generateCourseEventSerialNumbers(courseEventsAutoGeneratedSerial, session);
		DataAccess.updateEntity(wfTrainingPlan.getWfTrainingPlan(), session);
		EmployeeData trainingManager = EmployeesService.getEmployeeDirectManager(sreTask.getOriginalId());
		completeWFTask(sreTask, WFTaskActionsEnum.REVIEW.getCode(), curDate, curHijriDate, instance.getInstanceId(), getDelegate(trainingManager.getEmpId(), instance.getProcessId(), requester.getEmpId()), trainingManager.getEmpId(), sreTask.getTaskUrl(), WFTaskRolesEnum.SECONDARY_SIGN_MANAGER.getCode(), sreTask.getLevel(), session);
	    } else {
		closeWFInstanceByAction(requester.getEmpId(), instance, sreTask, WFTaskActionsEnum.REJECT.getCode(), null, session);
	    }

	    session.commitTransaction();
	} catch (BusinessException e) {
	    session.rollbackTransaction();
	    throw e;
	} catch (Exception e) {
	    e.printStackTrace();
	    session.rollbackTransaction();
	    throw new BusinessException("error_general");
	} finally {
	    session.close();
	}
    }

    public static void doWFTrainingPlanSM(EmployeeData requester, WFInstance instance, WFTask smTask, WFTrainingPlanData wfTrainingPlan, int approvalFlag) throws BusinessException {
	CustomSession session = DataAccess.getSession();
	try {
	    session.beginTransaction();

	    Date curDate = new Date();
	    Date curHijriDate = HijriDateService.getHijriSysDate();

	    if (approvalFlag == WFActionFlagsEnum.APPROVE.getCode()) {

		EmployeeData nextManager = EmployeesService.getEmployeeDirectManager(smTask.getOriginalId());
		EmployeeData cM = EmployeesService.getEmployeeData(smTask.getOriginalId());
		if ((instance.getProcessId() == WFProcessesEnum.TRAINING_PLAN_APPROVAL.getCode() && cM.getUnitTypeCode().intValue() == UnitTypesEnum.PRESIDENCY.getCode())
			|| (instance.getProcessId() != WFProcessesEnum.TRAINING_PLAN_APPROVAL.getCode() && (nextManager.getUnitTypeCode().intValue() == UnitTypesEnum.REGION_COMMANDER.getCode() || nextManager.getUnitTypeCode().intValue() == UnitTypesEnum.PRESIDENCY.getCode()))) {
		    // close workflow
		    closeTrainingPlanWorkFlow(requester, instance, smTask, wfTrainingPlan.getTrainingYearId(), session);
		} else { // Send to next manager
		    completeWFTask(smTask, WFTaskActionsEnum.SUPER_SIGN.getCode(), curDate, curHijriDate, instance.getInstanceId(), getDelegate(nextManager.getEmpId(), instance.getProcessId(), requester.getEmpId()), nextManager.getEmpId(), smTask.getTaskUrl(), WFTaskRolesEnum.SIGN_MANAGER.getCode(), smTask.getLevel(), session);
		}

	    } else if (approvalFlag == WFActionFlagsEnum.RETURN_REVIEWER.getCode()) {
		List<WFTask> reviewerTasks = getWFInstanceTasksByRole(instance.getInstanceId(), WFTaskRolesEnum.REVIEWER_EMP.getCode());
		long originalId = reviewerTasks.isEmpty() ? requester.getEmpId() : reviewerTasks.get(0).getOriginalId();
		completeWFTask(smTask, WFTaskActionsEnum.RETURN_REVIEWER.getCode(), curDate, curHijriDate, instance.getInstanceId(), getDelegate(originalId, instance.getProcessId(), requester.getEmpId()), originalId, smTask.getTaskUrl(), WFTaskRolesEnum.REVIEWER_EMP.getCode(), smTask.getLevel(), session);

	    } else {
		closeWFInstanceByAction(requester.getEmpId(), instance, smTask, WFTaskActionsEnum.REJECT.getCode(), null, session);
	    }

	    session.commitTransaction();
	} catch (BusinessException e) {
	    session.rollbackTransaction();
	    throw e;
	} catch (Exception e) {
	    e.printStackTrace();
	    session.rollbackTransaction();
	    throw new BusinessException("error_general");
	} finally {
	    session.close();
	}
    }

    public static void doWFTrainingPlanSSM(EmployeeData requester, WFInstance instance, WFTrainingPlanData wfTrainingPlan, WFTask ssmTask, int approvalFlag) throws BusinessException {
	CustomSession session = DataAccess.getSession();
	try {
	    session.beginTransaction();

	    Date curDate = new Date();
	    Date curHijriDate = HijriDateService.getHijriSysDate();

	    if (approvalFlag == WFActionFlagsEnum.APPROVE.getCode()) {

		String role;
		long assigneeId;
		long originalId;

		EmployeeData curManager = EmployeesService.getEmployeeData(ssmTask.getOriginalId());
		long trainingUnitManagerId = UnitsService.getUnitById(wfTrainingPlan.getTrainingUnitId()).getPhysicalManagerId();

		if (curManager.getUnitTypeCode().intValue() == UnitTypesEnum.REGION_COMMANDER.getCode() || curManager.getEmpId() == trainingUnitManagerId) {

		    EmployeeData managerRedirectEmployee = getTrainingManager(instance.getProcessId(), requester.getPhysicalRegionId());
		    originalId = managerRedirectEmployee.getEmpId();
		    assigneeId = getDelegate(originalId, instance.getProcessId(), requester.getEmpId());
		    role = WFTaskRolesEnum.MANAGER_REDIRECT.getCode();
		} else { // Send to next manager
		    originalId = curManager.getManagerId();
		    assigneeId = getDelegate(originalId, instance.getProcessId(), requester.getEmpId());
		    role = WFTaskRolesEnum.SECONDARY_SIGN_MANAGER.getCode();
		}

		completeWFTask(ssmTask, WFTaskActionsEnum.SUPER_SIGN.getCode(), curDate, curHijriDate, instance.getInstanceId(), assigneeId, originalId, ssmTask.getTaskUrl(), role, ssmTask.getLevel(), session);

	    } else if (approvalFlag == WFActionFlagsEnum.RETURN_REVIEWER.getCode()) {
		completeWFTask(ssmTask, WFTaskActionsEnum.RETURN_REVIEWER.getCode(), curDate, curHijriDate, instance.getInstanceId(), getDelegate(requester.getEmpId(), instance.getProcessId(), requester.getEmpId()), requester.getEmpId(), ssmTask.getTaskUrl(), WFTaskRolesEnum.SECONDARY_REVIEWER_EMP.getCode(), ssmTask.getLevel(), session);
	    } else {
		closeWFInstanceByAction(requester.getEmpId(), instance, ssmTask, WFTaskActionsEnum.REJECT.getCode(), null, session);
	    }

	    session.commitTransaction();
	} catch (BusinessException e) {
	    session.rollbackTransaction();
	    throw e;
	} catch (Exception e) {
	    e.printStackTrace();
	    session.rollbackTransaction();
	    throw new BusinessException("error_general");
	} finally {
	    session.close();
	}
    }

    /*---------------------------Operations---------------------------*/
    private static void closeTrainingPlanWorkFlow(EmployeeData requester, WFInstance instance, WFTask smTask, long trainingYearId, CustomSession session) throws BusinessException {
	try {
	    closeWFInstanceByAction(requester.getEmpId(), instance, smTask, WFTaskActionsEnum.SUPER_SIGN.getCode(), null, session);

	    long noOfApproved = 0;
	    int countTrainingUnits = TrainingSetupService.getAllTrainingUnitsData().size();
	    int countRegions = CommonService.getAllRegions().size();
	    Long decisionApprovedId = null;
	    Long originalDecisionApprovedId = null;

	    if (instance.getProcessId() == WFProcessesEnum.TRAINING_PLAN_INITIATION.getCode()) {
		noOfApproved = countTrainingUnits;
	    } else if (instance.getProcessId() == WFProcessesEnum.TRAINING_PLAN_FINALIZATION.getCode()) {
		noOfApproved = countTrainingUnits * countRegions;
	    } else {
		originalDecisionApprovedId = smTask.getOriginalId();
		decisionApprovedId = smTask.getOriginalId();
	    }

	    if (instance.getProcessId() == WFProcessesEnum.TRAINING_PLAN_APPROVAL.getCode() || countApprovedWFTrainingPlan(trainingYearId, FlagsEnum.ALL.getCode(), FlagsEnum.ALL.getCode(), instance.getProcessId()) == noOfApproved - 1) {
		doTrainingYearIntegration(trainingYearId, decisionApprovedId, originalDecisionApprovedId, instance.getProcessId() == WFProcessesEnum.TRAINING_PLAN_APPROVAL.getCode(), getWFProcess(instance.getProcessId()).getProcessName(), session);

		if (instance.getProcessId() == WFProcessesEnum.TRAINING_PLAN_INITIATION.getCode()) {
		    List<TrainingCourseEventData> planCoursesEvents = TrainingCoursesEventsService.getCoursesEventsByTrainingYearId(trainingYearId);
		    TrainingCoursesEventsService.addTrainingCoursesEventsAllocations(planCoursesEvents, false, session);
		}
	    }
	} catch (BusinessException e) {
	    throw e;
	} catch (Exception e) {
	    e.printStackTrace();
	    throw new BusinessException("error_general");
	}
    }

    private static void doTrainingYearIntegration(long trainingYearId, Long decisionApprovedId, Long originalDecisionApprovedId, boolean isApprovalProcess, String processName, CustomSession session) throws BusinessException {
	TrainingSetupService.handleTrainingYearChanges(trainingYearId, decisionApprovedId, originalDecisionApprovedId, isApprovalProcess, processName, session);
    }

    public static boolean isEmployeeAuthorizedForPosition(int positionCode, long employeeUnitId, long physicalRegionId) throws BusinessException {
	WFPosition position = getWFPosition(positionCode, physicalRegionId);
	return position == null ? false : employeeUnitId == position.getUnitId();
    }

    private static void splitTrainingPlanCoursesForSerialGeneration(List<TrainingCourseEventData> courseEvents, List<TrainingCourseEventData> courseEventsAutoGeneratedSerial, List<TrainingCourseEventData> courseEventsNotAutoGenerated) {
	for (TrainingCourseEventData courseEvent : courseEvents) {
	    if (courseEvent.getAutoGeneratedSerialFlag().equals(FlagsEnum.ON.getCode()))
		courseEventsAutoGeneratedSerial.add(courseEvent);
	    else
		courseEventsNotAutoGenerated.add(courseEvent);
	}
    }

    /*---------------------------Validations---------------------------*/
    private static void validateTrainingPlan(List<TrainingCourseEventData> courseEvents, List<TrainingCourseEventData> courseEventsNotAutoGenerated, Long trainingUnitId, long trainingYearId) throws BusinessException {
	if (courseEvents.size() <= 0) {
	    throw new BusinessException("error_cannotSendEmptyTrainingPlan");
	}

	TrainingCoursesEventsService.validateTrainingPlanBusinessRules(courseEvents, courseEventsNotAutoGenerated, trainingUnitId, trainingYearId);
    }

    /*---------------------------Queries---------------------------*/
    public static boolean checkExistingApprovedTrainingPlan(long trainingYearId, long trainingUnitId, long regionId, long processId) throws BusinessException {
	return countApprovedWFTrainingPlan(trainingYearId, trainingUnitId, regionId, processId) > 0;
    }

    public static long countApprovedWFTrainingPlan(long trainingYearId, long trainingUnitId, long regionId, long processId) throws BusinessException {
	try {
	    Map<String, Object> qParams = new HashMap<String, Object>();

	    qParams.put("P_TRAINING_YEAR_ID", trainingYearId);
	    qParams.put("p_TRAINING_UNIT_ID", trainingUnitId);
	    qParams.put("P_REGION_ID", regionId);
	    qParams.put("P_PROCESS_ID", processId);
	    qParams.put("P_EXCLUDED_STATUS", WFInstanceStatusEnum.RUNNING.getCode());
	    qParams.put("P_EXCLUDED_ACTION", WFTaskActionsEnum.REJECT.getCode());

	    Long count = (Long) DataAccess.executeNamedQuery(Long.class, QueryNamesEnum.WF_COUNT_APPROVED_WFTRAINING_PLAN.getCode(), qParams).get(0);
	    return count == null ? 0 : count;
	} catch (DatabaseException e) {
	    e.printStackTrace();
	    throw new BusinessException("error_general");
	}
    }

    public static boolean checkExistingTrainingPlanUnderApproval(long trainingYearId, long trainingUnitId, long regionId, long processId) throws BusinessException {
	return searchWFTrainingPlanData(FlagsEnum.ALL.getCode(), trainingYearId, trainingUnitId, regionId, processId, WFInstanceStatusEnum.RUNNING.getCode()).size() > 0;
    }

    public static WFTrainingPlanData getWFTrainingPlanDataByInstanceId(long instanceId) throws BusinessException {
	return searchWFTrainingPlanData(instanceId, FlagsEnum.ALL.getCode(), FlagsEnum.ALL.getCode(), FlagsEnum.ALL.getCode(), FlagsEnum.ALL.getCode(), FlagsEnum.ALL.getCode()).get(0);
    }

    public static List<WFTrainingPlanData> getWFTrainingPlanData(long instanceId, long trainingYearId, long trainingUnitId, long regionId, long processId, int instanceStatus) throws BusinessException {
	return searchWFTrainingPlanData(instanceId, trainingYearId, trainingUnitId, regionId, processId, instanceStatus);
    }

    private static List<WFTrainingPlanData> searchWFTrainingPlanData(long instanceId, long trainingYearId, long trainingUnitId, long regionId, long processId, int instanceStatus) throws BusinessException {
	try {
	    Map<String, Object> qParams = new HashMap<String, Object>();

	    qParams.put("P_INSTANCE_ID", instanceId);
	    qParams.put("P_TRAINING_YEAR_ID", trainingYearId);
	    qParams.put("p_TRAINING_UNIT_ID", trainingUnitId);
	    qParams.put("P_REGION_ID", regionId);
	    qParams.put("P_PROCESS_ID", processId);
	    qParams.put("P_STATUS", instanceStatus);

	    List<WFTrainingPlanData> result = DataAccess.executeNamedQuery(WFTrainingPlanData.class, QueryNamesEnum.WF_GET_WFTRAINING_PLAN.getCode(), qParams);
	    return result;
	} catch (DatabaseException e) {
	    e.printStackTrace();
	    throw new BusinessException("error_general");
	}
    }

    /*********************************************************** WFTrainingPlanNeed ***********************************************************/
    /*---------------------------Work Flow Steps----------------------*/
    public static void initWFTrainingPlanNeeds(EmployeeData requester, List<WFTrainingPlanNeedData> trainingPlanNeedsData, TrainingYear trainingYear, long requestingUnitId, long processId, String taskUrl) throws BusinessException {

	validateTrainingPlanNeeds(trainingPlanNeedsData, trainingYear, requestingUnitId);

	CustomSession session = DataAccess.getSession();
	try {
	    session.beginTransaction();

	    Date curDate = new Date();
	    Date curHijriDate = HijriDateService.getHijriSysDate();

	    WFInstance instance = addWFInstance(processId, requester.getEmpId(), curDate, curHijriDate, WFInstanceStatusEnum.RUNNING.getCode(), null, Arrays.asList(requester.getEmpId()), session);

	    addWFTask(instance.getInstanceId(), getDelegate(requester.getManagerId(), processId, requester.getEmpId()), requester.getManagerId(), curDate, curHijriDate, taskUrl, WFTaskRolesEnum.DIRECT_MANAGER.getCode(), "1", session);
	    for (WFTrainingPlanNeedData planNeed : trainingPlanNeedsData) {
		planNeed.setInstanceId(instance.getInstanceId());
		DataAccess.addEntity(planNeed.getWfTrainingPlansNeed(), session);
	    }

	    session.commitTransaction();
	} catch (Exception e) {
	    session.rollbackTransaction();

	    for (WFTrainingPlanNeedData planNeed : trainingPlanNeedsData) {
		planNeed.setInstanceId(null);
	    }

	    if (e instanceof BusinessException)
		throw (BusinessException) e;

	    e.printStackTrace();
	    throw new BusinessException("error_general");
	} finally {
	    session.close();
	}
    }

    public static void doWFTrainingPlanNeedsDM(EmployeeData requester, WFInstance instance, WFTask dmTask, boolean isApproved) throws BusinessException {

	CustomSession session = DataAccess.getSession();
	try {
	    session.beginTransaction();

	    Date curDate = new Date();
	    Date curHijriDate = HijriDateService.getHijriSysDate();

	    String role;
	    long assigneeId = requester.getEmpId();
	    long originalId = requester.getEmpId();

	    if (isApproved) {

		EmployeeData nextDM = EmployeesService.getEmployeeDirectManager(dmTask.getOriginalId());

		if (nextDM.getUnitTypeCode().intValue() == UnitTypesEnum.REGION_COMMANDER.getCode() || nextDM.getUnitTypeCode().intValue() == UnitTypesEnum.PRESIDENCY.getCode()) {

		    EmployeeData managerRedirectEmployee = getTrainingManager(instance.getProcessId(), requester.getPhysicalRegionId());
		    originalId = managerRedirectEmployee.getEmpId();
		    assigneeId = getDelegate(originalId, instance.getProcessId(), requester.getEmpId());
		    role = WFTaskRolesEnum.MANAGER_REDIRECT.getCode();
		} else {
		    originalId = nextDM.getEmpId();
		    assigneeId = getDelegate(originalId, instance.getProcessId(), requester.getEmpId());
		    role = WFTaskRolesEnum.DIRECT_MANAGER.getCode();
		}

		completeWFTask(dmTask, WFTaskActionsEnum.APPROVE.getCode(), curDate, curHijriDate, instance.getInstanceId(), assigneeId, originalId, dmTask.getTaskUrl(), role, dmTask.getLevel(), session);

	    } else {
		closeWFInstanceByAction(requester.getEmpId(), instance, dmTask, WFTaskActionsEnum.REJECT.getCode(), null, session);
	    }

	    session.commitTransaction();
	} catch (BusinessException e) {
	    session.rollbackTransaction();
	    throw e;
	} catch (Exception e) {
	    session.rollbackTransaction();
	    e.printStackTrace();
	    throw new BusinessException("error_general");
	} finally {
	    session.close();
	}
    }

    public static void doWFTrainingPlanNeedsMR(EmployeeData requester, WFInstance instance, WFTask mrTask, long reviewerEmpId) throws BusinessException {
	try {
	    Date curDate = new Date();
	    Date curHijriDate = HijriDateService.getHijriSysDate();

	    completeWFTask(mrTask, WFTaskActionsEnum.REDIRECT.getCode(), curDate, curHijriDate, instance.getInstanceId(), getDelegate(reviewerEmpId, instance.getProcessId(), requester.getEmpId()), reviewerEmpId, mrTask.getTaskUrl(), WFTaskRolesEnum.REVIEWER_EMP.getCode(), mrTask.getLevel());
	} catch (BusinessException e) {
	    throw e;
	} catch (Exception e) {
	    e.printStackTrace();
	    throw new BusinessException("error_general");
	}
    }

    public static void doWFTrainingPlanNeedsRE(EmployeeData requester, WFInstance instance, List<WFTrainingPlanNeedData> trainingPlanNeedsData, WFTask reTask, boolean isApproved) throws BusinessException {
	CustomSession session = DataAccess.getSession();
	try {
	    session.beginTransaction();

	    Date curDate = new Date();
	    Date curHijriDate = HijriDateService.getHijriSysDate();

	    if (isApproved) {
		EmployeeData trainingManager = EmployeesService.getEmployeeDirectManager(reTask.getOriginalId());
		completeWFTask(reTask, WFTaskActionsEnum.REVIEW.getCode(), curDate, curHijriDate, instance.getInstanceId(), getDelegate(trainingManager.getEmpId(), instance.getProcessId(), requester.getEmpId()), trainingManager.getEmpId(), reTask.getTaskUrl(), WFTaskRolesEnum.SIGN_MANAGER.getCode(), reTask.getLevel(), session);
	    } else {
		closeWFInstanceByAction(requester.getEmpId(), instance, reTask, WFTaskActionsEnum.REJECT.getCode(), null, session);
	    }

	    session.commitTransaction();
	} catch (BusinessException e) {
	    session.rollbackTransaction();
	    throw e;
	} catch (Exception e) {
	    e.printStackTrace();
	    session.rollbackTransaction();
	    throw new BusinessException("error_general");
	} finally {
	    session.close();
	}
    }

    public static void doWFTrainingPlanNeedsSM(EmployeeData requester, WFInstance instance, List<WFTrainingPlanNeedData> wfTrainingList, WFTask smTask, int approvalFlag) throws BusinessException {
	CustomSession session = DataAccess.getSession();
	try {
	    session.beginTransaction();

	    Date curDate = new Date();
	    Date curHijriDate = HijriDateService.getHijriSysDate();

	    if (approvalFlag == WFActionFlagsEnum.APPROVE.getCode()) {

		EmployeeData nextManager = EmployeesService.getEmployeeDirectManager(smTask.getOriginalId());

		if (nextManager.getUnitTypeCode().intValue() == UnitTypesEnum.REGION_COMMANDER.getCode() || nextManager.getUnitTypeCode().intValue() == UnitTypesEnum.PRESIDENCY.getCode()) {
		    closeWFInstanceByAction(requester.getEmpId(), instance, smTask, WFTaskActionsEnum.SUBMIT_TO_STUDY.getCode(), null, session);
		} else { // Send to next manager

		    completeWFTask(smTask, WFTaskActionsEnum.SUBMIT_TO_STUDY.getCode(), curDate, curHijriDate, instance.getInstanceId(), getDelegate(nextManager.getEmpId(), instance.getProcessId(), requester.getEmpId()), nextManager.getEmpId(), smTask.getTaskUrl(), WFTaskRolesEnum.SIGN_MANAGER.getCode(), smTask.getLevel(), session);
		}

	    } else if (approvalFlag == WFActionFlagsEnum.RETURN_REVIEWER.getCode()) {
		List<WFTask> reviewerTasks = getWFInstanceTasksByRole(instance.getInstanceId(), WFTaskRolesEnum.REVIEWER_EMP.getCode());
		long originalId = reviewerTasks.get(0).getOriginalId();
		completeWFTask(smTask, WFTaskActionsEnum.RETURN_REVIEWER.getCode(), curDate, curHijriDate, instance.getInstanceId(), getDelegate(originalId, instance.getProcessId(), requester.getEmpId()), originalId, smTask.getTaskUrl(), WFTaskRolesEnum.REVIEWER_EMP.getCode(), smTask.getLevel(), session);

	    } else {
		closeWFInstanceByAction(requester.getEmpId(), instance, smTask, WFTaskActionsEnum.REJECT.getCode(), null, session);
	    }

	    session.commitTransaction();
	} catch (BusinessException e) {
	    session.rollbackTransaction();
	    throw e;
	} catch (Exception e) {
	    e.printStackTrace();
	    session.rollbackTransaction();
	    throw new BusinessException("error_general");
	} finally {
	    session.close();
	}
    }

    /*---------------------------Validations--------------------------*/
    private static void validateTrainingPlanNeeds(List<WFTrainingPlanNeedData> trainingPlanNeedsData, TrainingYear trainingYear, long requestingUnitId) throws BusinessException {
	// Check if no courses were added to the training plan needs request
	if (trainingPlanNeedsData == null || trainingPlanNeedsData.isEmpty())
	    throw new BusinessException("error_cannotSendEmptyTrainingPlanNeedRequest");
	// check if there is a running workflow for the requesting unit
	if (existingWFTrainingPlanNeedsDataUnderApproval(requestingUnitId))
	    throw new BusinessException("error_trainingPlanNeedUnderApproval");

	// check if training year needs start and end dates has been assigned or not
	if (trainingYear.getNeedsStartDateString() == null || trainingYear.getNeedsStartDateString().isEmpty() || trainingYear.getNeedsEndDateString() == null || trainingYear.getNeedsEndDateString().isEmpty())
	    throw new BusinessException("error_notAssignedNeedsStartAndEndDates");
	// check if request date is between training year needs start and end dates
	if (!HijriDateService.isDateBetween(trainingYear.getNeedsStartDate(), trainingYear.getNeedsEndDate(), HijriDateService.getHijriSysDate()))
	    throw new BusinessException("error_requestDayNotBetweenTrainingPlanNeedsDates", new String[] { trainingYear.getNeedsStartDateString(), trainingYear.getNeedsEndDateString() });

	// check for null values in needs count for each added course event
	for (WFTrainingPlanNeedData needData : trainingPlanNeedsData) {
	    if (needData.getCourseEventId() == null)
		throw new BusinessException("error_transactionDataError");
	    if (needData.getNeedsCount() == null || !(needData.getNeedsCount() > 0 && needData.getNeedsCount() <= NEEDS_COUNT_LIMIT))
		throw new BusinessException("error_invalidTrainingPlanNeed", new String[] { needData.getCourseName() });
	}
    }

    /*---------------------------Queries------------------------------*/
    public static boolean existingWFTrainingPlanNeedsDataUnderApproval(long requestingUnitId) throws BusinessException {
	return searchWFTrainingPlanNeedsData(FlagsEnum.ALL.getCode(), requestingUnitId, FlagsEnum.ALL.getCode(), FlagsEnum.ALL.getCode(), WFInstanceStatusEnum.RUNNING.getCode()).size() > 0 ? true : false;
    }

    public static List<WFTrainingPlanNeedData> getWFTrainingPlanNeedDataByInstanceId(long instanceId) throws BusinessException {
	return searchWFTrainingPlanNeedsData(instanceId, FlagsEnum.ALL.getCode(), FlagsEnum.ALL.getCode(), FlagsEnum.ALL.getCode(), FlagsEnum.ALL.getCode());
    }

    public static List<WFTrainingPlanNeedData> getWFTrainingPlanNeedData(long instanceId, long trainingUnitId, long courseEventId) throws BusinessException {
	return searchWFTrainingPlanNeedsData(instanceId, FlagsEnum.ALL.getCode(), trainingUnitId, courseEventId, FlagsEnum.ALL.getCode());
    }

    private static List<WFTrainingPlanNeedData> searchWFTrainingPlanNeedsData(long instanceId, long requestingUnitId, long trainingUnitId, long courseEventId, int instanceStatus) throws BusinessException {
	try {
	    Map<String, Object> qParams = new HashMap<String, Object>();

	    qParams.put("P_INSTANCE_ID", instanceId);
	    qParams.put("P_REQUESTING_UNIT_ID", requestingUnitId);
	    qParams.put("P_TRAINING_UNIT_ID", trainingUnitId);
	    qParams.put("P_COURSE_EVENT_ID", courseEventId);
	    qParams.put("P_STATUS", instanceStatus);

	    return DataAccess.executeNamedQuery(WFTrainingPlanNeedData.class, QueryNamesEnum.HCM_SEARCH_WF_TRAINING_PLAN_NEED_DATA.getCode(), qParams);
	} catch (DatabaseException e) {
	    e.printStackTrace();
	    throw new BusinessException("error_general");
	}
    }

    public static List<WFTrainingPlanNeedData> getDistinctApprovedWFTrainingPlanNeedsData(long requestingUnitId, long trainingUnitId, long trainingYearId, long requestingUnitRegionId, long courseEventId) throws BusinessException {
	return searchDistinctApprovedWFTrainingPlanNeedsData(requestingUnitId, trainingUnitId, trainingYearId, requestingUnitRegionId, courseEventId);
    }

    private static List<WFTrainingPlanNeedData> searchDistinctApprovedWFTrainingPlanNeedsData(long requestingUnitId, long trainingUnitId, long trainingYearId, long requestingUnitRegionId, long courseEventId) throws BusinessException {
	try {
	    Map<String, Object> qParams = new HashMap<String, Object>();

	    qParams.put("P_REQUESTING_UNIT_ID", requestingUnitId);
	    qParams.put("P_EXCLUDED_ACTION", WFTaskActionsEnum.REJECT.getCode());
	    qParams.put("P_TRAINING_UNIT_ID", trainingUnitId);
	    qParams.put("P_TRAINING_YEAR_ID", trainingYearId);
	    qParams.put("P_REQUESTING_UNIT_REGION_ID", requestingUnitRegionId);
	    qParams.put("P_COURSE_EVENT_ID", courseEventId);

	    List<Object> list = (ArrayList<Object>) DataAccess.executeNamedQuery(Object.class, QueryNamesEnum.HCM_SEARCH_WF_TRAINING_PLAN_NEED_REQUEST.getCode(), qParams);
	    List<WFTrainingPlanNeedData> resultList = new ArrayList<WFTrainingPlanNeedData>();
	    for (Object obj : list) {
		WFTrainingPlanNeedData needData = new WFTrainingPlanNeedData();
		Object[] data = (Object[]) obj;
		needData.setInstanceId((long) data[0]); // instance long
		needData.setRequestingUnitFullName((String) data[1]);// requestingUnitName long
		needData.setHijriRequestDate((Date) data[2]);// hijriRequestDate Date
		needData.setRemarks((String) data[3]);// remarks string
		resultList.add(needData);
	    }
	    return resultList;
	} catch (DatabaseException e) {
	    e.printStackTrace();
	    throw new BusinessException("error_general");
	}
    }

    /*---------------------------REPORTS------------------------------*/
    public static byte[] getTrainingPlanNeedsInquiryByCourseBytes(String trainingYearName, String trainingUnitName, long regionId, String regionName, String courseName, long courseEventId, long requestingUnitId) throws BusinessException {
	try {
	    Map<String, Object> parameters = new HashMap<String, Object>();
	    String reportName = ReportNamesEnum.TRAINING_PLAN_NEEDS_INQUIRY_BY_COURSE.getCode();
	    parameters.put("P_TRAINING_YEAR_NAME", trainingYearName);
	    parameters.put("P_TRAINING_UNIT_NAME", trainingUnitName);
	    parameters.put("P_REGION_ID", regionId);
	    parameters.put("P_REGION_NAME", regionName);
	    parameters.put("P_COURSE_NAME", courseName);
	    parameters.put("P_COURSE_EVENT_ID", courseEventId);
	    parameters.put("P_REQUESTING_UNIT_ID", requestingUnitId);
	    parameters.put("P_ACTION", WFTaskActionsEnum.REJECT.getCode());
	    parameters.put("P_SYS_DATE", HijriDateService.getHijriSysDateString());
	    return getReportData(reportName, parameters);
	} catch (Exception e) {
	    e.printStackTrace();
	    throw new BusinessException("error_reportPrintingError");
	}
    }

    public static byte[] getTrainingPlanNeedsInquiryByRequestingUnitBytes(long trainingYearId, String trainingYearName, long trainingUnitId, String trainingUnitName, String regionName, long requestingUnitRegionId, long courseEventId, long requestingUnitId) throws BusinessException {
	try {
	    Map<String, Object> parameters = new HashMap<String, Object>();
	    String reportName = ReportNamesEnum.TRAINING_PLAN_NEEDS_INQUIRY_BY_REQUESTING_UNIT.getCode();
	    parameters.put("P_TRAINING_YEAR_ID", trainingYearId);
	    parameters.put("P_TRAINING_YEAR_NAME", trainingYearName);
	    parameters.put("P_TRAINING_UNIT_ID", trainingUnitId);
	    parameters.put("P_TRAINING_UNIT_NAME", trainingUnitName);
	    parameters.put("P_REGION_NAME", regionName);
	    parameters.put("P_REGION_ID", requestingUnitRegionId);
	    parameters.put("P_COURSE_EVENT_ID", courseEventId);
	    parameters.put("P_REQUESTING_UNIT_ID", requestingUnitId);
	    parameters.put("P_ACTION", WFTaskActionsEnum.REJECT.getCode());
	    parameters.put("P_SYS_DATE", HijriDateService.getHijriSysDateString());
	    return getReportData(reportName, parameters);
	} catch (Exception e) {
	    e.printStackTrace();
	    throw new BusinessException("error_reportPrintingError");
	}
    }

    /******************************************************** WFTrainingCourseEvents ***********************************************************************************/
    /*---------------------------Work Flow Steps----------------------*/
    /*---------------------------CollectiveApproval----------------------*/
    public static void doTrainingCourseEventsCollectiveAction(Object trainingCourseTaskObject, List<Object> tasksAndTrainingCourseObjects) throws BusinessException {
	// object[0] - WFTrainingCourseEvents
	// object[1] - WFTask
	// object[2] - WFInstance
	// object[3] - processName
	// object[4] - requester
	// object[5] - delegatingName
	WFTrainingCourseEventData trainingCourseRequest = (WFTrainingCourseEventData) (((Object[]) trainingCourseTaskObject)[0]);
	WFTask task = (WFTask) (((Object[]) trainingCourseTaskObject)[1]);
	WFInstance instance = (WFInstance) (((Object[]) trainingCourseTaskObject)[2]);
	EmployeeData requester = (EmployeeData) (((Object[]) trainingCourseTaskObject)[4]);
	List<WFTrainingCourseEventData> trainingCourseEventList = new ArrayList<WFTrainingCourseEventData>();
	for (int i = 0; i < tasksAndTrainingCourseObjects.size(); i++) {
	    WFTrainingCourseEventData currentWFTrainingCourseEventData = (WFTrainingCourseEventData) (((Object[]) tasksAndTrainingCourseObjects.get(i))[0]);
	    if (task.getInstanceId().longValue() == currentWFTrainingCourseEventData.getInstanceId().longValue()) {
		trainingCourseEventList.add(currentWFTrainingCourseEventData);
	    }
	}
	TrainingCourseEventData courseEvent = TrainingCoursesEventsService.getCourseEventById(trainingCourseRequest.getCourseEventId());

	if (task.getAssigneeWfRole().equals(WFTaskRolesEnum.SIGN_MANAGER.getCode())) {
	    TrainingCoursesEventsWorkFlow.doWFTrainingCourseEventsSM(requester, instance, trainingCourseEventList, courseEvent, task, WFActionFlagsEnum.APPROVE.getCode());

	}
    }

    /*---------------------------Work Flow Steps Claims----------------------*/
    public static void initWFTrainingCourseEvents(EmployeeData requester, List<WFTrainingCourseEventData> wfTrainingCourseEventsList, TrainingCourseEventData courseEvent, long processId, String taskUrl, List<EmployeeData> internalCopiesEmployees, String externalCopies, String attachments) throws BusinessException {
	validateWFTrainingCourseEvents(wfTrainingCourseEventsList, courseEvent, null, processId, attachments);

	CustomSession session = DataAccess.getSession();
	try {
	    session.beginTransaction();

	    Date curDate = new Date();
	    Date curHijriDate = HijriDateService.getHijriSysDate();
	    List<Long> instanceBeneficiariesIds = null;

	    if (processId == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_REQUEST.getCode() || processId == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_MODIFY_REQUEST.getCode())
		instanceBeneficiariesIds = getTrainingCourseEventsInstanceBeneficiariesIds(wfTrainingCourseEventsList);

	    WFInstance instance = addWFInstance(processId, requester.getEmpId(), curDate, curHijriDate, WFInstanceStatusEnum.RUNNING.getCode(), attachments,
		    (instanceBeneficiariesIds == null || instanceBeneficiariesIds.isEmpty()) ? Arrays.asList(requester.getEmpId()) : instanceBeneficiariesIds, session);

	    if (processId == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_RESULTS.getCode() && requester.getEmpId().longValue() == UnitsService.getUnitById(courseEvent.getTrainingUnitId()).getPhysicalManagerId())
		addWFTask(instance.getInstanceId(), getDelegate(requester.getEmpId(), processId, requester.getEmpId()), requester.getEmpId(), curDate, curHijriDate, taskUrl, WFTaskRolesEnum.SIGN_MANAGER.getCode(), "1", session);
	    else
		addWFTask(instance.getInstanceId(), getDelegate(requester.getManagerId(), processId, requester.getEmpId()), requester.getManagerId(), curDate, curHijriDate, taskUrl, WFTaskRolesEnum.SIGN_MANAGER.getCode(), "1", session);

	    String internalCopies = EmployeesService.getEmployeesIdsString(internalCopiesEmployees);
	    for (WFTrainingCourseEventData wfTrainingCourseEventData : wfTrainingCourseEventsList) {

		wfTrainingCourseEventData.setInternalCopies(internalCopies);
		wfTrainingCourseEventData.setExternalCopies(externalCopies);

		wfTrainingCourseEventData.setInstanceId(instance.getInstanceId());
		DataAccess.addEntity(wfTrainingCourseEventData.getWfTrainingCourseEvent(), session);
	    }

	    session.commitTransaction();
	} catch (Exception e) {
	    session.rollbackTransaction();

	    for (WFTrainingCourseEventData wfTrainingCourseEventData : wfTrainingCourseEventsList)
		wfTrainingCourseEventData.setInstanceId(null);

	    if (e instanceof BusinessException)
		throw (BusinessException) e;

	    e.printStackTrace();
	    throw new BusinessException("error_general");
	} finally {
	    session.close();
	}
    }

    public static void doWFTrainingCourseEventsRE(EmployeeData requester, WFInstance instance, List<WFTrainingCourseEventData> wfTrainingCourseEventsList, TrainingCourseEventData courseEvent, List<EmployeeData> internalCopiesEmployees, String externalCopies, String attachments, WFTask reTask, boolean isApproved) throws BusinessException {
	if (isApproved)
	    validateWFTrainingCourseEvents(wfTrainingCourseEventsList, courseEvent, instance, instance.getProcessId(), instance.getAttachments());

	CustomSession session = DataAccess.getSession();
	try {
	    session.beginTransaction();

	    if (isApproved) {
		String internalCopies = EmployeesService.getEmployeesIdsString(internalCopiesEmployees);
		for (WFTrainingCourseEventData wfTrainingCourseEventData : wfTrainingCourseEventsList) {

		    wfTrainingCourseEventData.setInternalCopies(internalCopies);
		    wfTrainingCourseEventData.setExternalCopies(externalCopies);

		    if (wfTrainingCourseEventData.getInstanceId() == null) {
			wfTrainingCourseEventData.setInstanceId(instance.getInstanceId());
			DataAccess.addEntity(wfTrainingCourseEventData.getWfTrainingCourseEvent(), session);
		    } else
			DataAccess.updateEntity(wfTrainingCourseEventData.getWfTrainingCourseEvent(), session);
		}

		if (instance.getProcessId() == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_POSTPONE_REQUEST.getCode() || instance.getProcessId() == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_CANCEL_REQUEST.getCode()) {
		    if (attachments != null && !attachments.isEmpty())
			updateWFInstanceAttachments(instance, attachments, session);
		}
		EmployeeData trainingManager = EmployeesService.getEmployeeDirectManager(reTask.getOriginalId());
		completeWFTask(reTask, WFTaskActionsEnum.REVIEW.getCode(), new Date(), HijriDateService.getHijriSysDate(), instance.getInstanceId(), getDelegate(trainingManager.getEmpId(), instance.getProcessId(), requester.getEmpId()), trainingManager.getEmpId(), reTask.getTaskUrl(), WFTaskRolesEnum.SIGN_MANAGER.getCode(), reTask.getLevel(), session);
	    } else {
		closeWFInstanceByAction(requester.getEmpId(), instance, reTask, WFTaskActionsEnum.REJECT.getCode(), null, session);
	    }

	    session.commitTransaction();
	} catch (BusinessException e) {
	    session.rollbackTransaction();
	    throw e;
	} catch (Exception e) {
	    e.printStackTrace();
	    session.rollbackTransaction();
	    throw new BusinessException("error_general");
	} finally {
	    session.close();
	}
    }

    public static void doWFTrainingCourseEventsSM(EmployeeData requester, WFInstance instance, List<WFTrainingCourseEventData> wfTrainingCourseEventsList, TrainingCourseEventData courseEvent, WFTask smTask, int approvalFlag) throws BusinessException {
	CustomSession session = DataAccess.getSession();
	try {
	    session.beginTransaction();

	    Date curDate = new Date();
	    Date curHijriDate = HijriDateService.getHijriSysDate();

	    if (approvalFlag == WFActionFlagsEnum.APPROVE.getCode()) {

		EmployeeData nextManager = EmployeesService.getEmployeeDirectManager(smTask.getOriginalId());
		EmployeeData curManager = EmployeesService.getEmployeeData(smTask.getOriginalId());

		if ((instance.getProcessId() == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_RESULTS.getCode() && curManager.getEmpId().longValue() == UnitsService.getUnitById(courseEvent.getTrainingUnitId()).getPhysicalManagerId())
			|| ((instance.getProcessId() == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_CANCEL_REQUEST.getCode() || instance.getProcessId() == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_POSTPONE_REQUEST.getCode()) && curManager.getUnitTypeCode().intValue() == UnitTypesEnum.PRESIDENCY.getCode())
			|| ((instance.getProcessId() == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_REQUEST.getCode() || instance.getProcessId() == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_MODIFY_REQUEST.getCode()) && nextManager.getUnitTypeCode().intValue() == UnitTypesEnum.PRESIDENCY.getCode())) {

		    closeTrainingCourseEventsWorkFlow(requester, instance, wfTrainingCourseEventsList, courseEvent, curManager.getPhysicalRegionId(), smTask, session);
		} else { // Send to next manager

		    completeWFTask(smTask, WFTaskActionsEnum.SUPER_SIGN.getCode(), curDate, curHijriDate, instance.getInstanceId(), getDelegate(nextManager.getEmpId(), instance.getProcessId(), requester.getEmpId()), nextManager.getEmpId(), smTask.getTaskUrl(), WFTaskRolesEnum.SIGN_MANAGER.getCode(), smTask.getLevel(), session);
		}

	    } else if (approvalFlag == WFActionFlagsEnum.RETURN_REVIEWER.getCode()) {
		List<WFTask> reviewerTasks = getWFInstanceTasksByRole(instance.getInstanceId(), WFTaskRolesEnum.REVIEWER_EMP.getCode());
		long originalId = reviewerTasks.isEmpty() ? requester.getEmpId() : reviewerTasks.get(0).getOriginalId();
		completeWFTask(smTask, WFTaskActionsEnum.RETURN_REVIEWER.getCode(), curDate, curHijriDate, instance.getInstanceId(), getDelegate(originalId, instance.getProcessId(), requester.getEmpId()), originalId, smTask.getTaskUrl(), WFTaskRolesEnum.REVIEWER_EMP.getCode(), smTask.getLevel(), session);

	    } else {
		closeWFInstanceByAction(requester.getEmpId(), instance, smTask, WFTaskActionsEnum.REJECT.getCode(), null, session);
	    }

	    session.commitTransaction();
	} catch (BusinessException e) {
	    session.rollbackTransaction();
	    throw e;
	} catch (Exception e) {
	    e.printStackTrace();
	    session.rollbackTransaction();
	    throw new BusinessException("error_general");
	} finally {
	    session.close();
	}
    }

    /*---------------------------Validations--------------------------*/
    private static void validateWFTrainingCourseEvents(List<WFTrainingCourseEventData> wfTrainingCourseEventsList, TrainingCourseEventData courseEvent, WFInstance instance, long processId, String attachments) throws BusinessException {
	if (wfTrainingCourseEventsList == null || wfTrainingCourseEventsList.isEmpty())
	    throw new BusinessException("error_cannotIssueCourseDecisionWithoutNominatedEmps");

	if (courseEvent == null)
	    throw new BusinessException("error_trainingCourseMandatory");

	validateRunningWFTrainingCourseEvents(courseEvent.getId(), instance == null ? null : instance.getInstanceId());

	if (processId == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_RESULTS.getCode()) {

	    List<TrainingTransactionData> allTraineesInCourseEvent = TrainingEmployeesService.getJoinedAndAcceptedEmployeesInCourseEventTransactionsList(courseEvent.getId());
	    for (TrainingTransactionData trainingTrn : allTraineesInCourseEvent)
		if (trainingTrn.getStatus().equals(TraineeStatusEnum.NOMINATION_ACCEPTED.getCode()) && EmployeesService.getEmployeeData(trainingTrn.getEmployeeId()).getStatusId() != EmployeeStatusEnum.SERVICE_TERMINATED.getCode())
		    throw new BusinessException("error_allTraineesShouldBeJoined");

	    TrainingEmployeesService.validateTrainingTransactionsForResultRegistration(allTraineesInCourseEvent, courseEvent.getId());
	} else {
	    int trainingTransactionCategory = getTrainingCourseEventsTransactionCategory(processId);

	    TrainingCoursesEventsService.validateCourseEvent(courseEvent, trainingTransactionCategory);

	    TrainingCoursesEventsService.validateTrainingCourseEventDecision(constructTrainingCourseEventDecision(wfTrainingCourseEventsList.get(0), courseEvent, processId, attachments, null, null));

	    if (processId == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_REQUEST.getCode() || processId == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_MODIFY_REQUEST.getCode()) {
		List<TrainingCourseEventDecisionEmployee> trainingCourseEventDecisionEmployeesList = constructTrainingCourseEventsDecisionEmployees(wfTrainingCourseEventsList);
		TrainingCoursesEventsService.validateTrainingCourseEventDecisionEmployees(trainingCourseEventDecisionEmployeesList);
	    }
	}
    }

    public static void validateRunningWFTrainingCourseEvents(long courseEventId, Long excludedInstanceId) throws BusinessException {

	List<WFTrainingCourseEventData> runningRequests = getRunningWFTrainingCoursesEventsByCourseId(courseEventId, excludedInstanceId);

	if (!runningRequests.isEmpty())
	    throw new BusinessException("error_trainingCourseHasPendingWF");
    }

    /*---------------------------Operations------------------------------*/
    public static int getTrainingCourseEventsTransactionCategory(long processId) throws BusinessException {
	if (processId == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_REQUEST.getCode()) {
	    return TrainingTransactionCategoryEnum.COURSE_EVENT_DECISION_REQUEST.getCode();
	} else if (processId == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_MODIFY_REQUEST.getCode()) {
	    return TrainingTransactionCategoryEnum.COURSE_EVENT_DECISION_MODIFY_REQUEST.getCode();
	} else if (processId == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_POSTPONE_REQUEST.getCode()) {
	    return TrainingTransactionCategoryEnum.COURSE_EVENT_POSTPONEMENT_DECISION_REQUEST.getCode();
	} else if (processId == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_CANCEL_REQUEST.getCode()) {
	    return TrainingTransactionCategoryEnum.COURSE_EVENT_CANCEL_DECISION_REQUEST.getCode();
	} else {
	    throw new BusinessException("error_transactionDataError");
	}

    }

    public static WFTrainingCourseEventData constructWFTrainingCourseEventData(TrainingCourseEventData courseEvent, TrainingTransactionData trainingTransaction, TrainingCourseEventDecisionEmployee externalCourseEventDecisionEmployee) throws BusinessException {
	WFTrainingCourseEventData wfTrainingCourseEventData = new WFTrainingCourseEventData();

	wfTrainingCourseEventData.setCourseEventId(courseEvent.getId());
	wfTrainingCourseEventData.setNewStartDate(courseEvent.getActualStartDate());
	wfTrainingCourseEventData.setNewEndDate(courseEvent.getActualEndDate());

	if (trainingTransaction != null) {
	    wfTrainingCourseEventData.setTrainingTransactionId(trainingTransaction.getId());
	    wfTrainingCourseEventData.setEmployeeId(trainingTransaction.getEmployeeId());

	    EmployeeData employee = EmployeesService.getEmployeeData(trainingTransaction.getEmployeeId());

	    wfTrainingCourseEventData.setEmployeeName(employee.getName());
	    wfTrainingCourseEventData.setEmployeeCategoryId(employee.getCategoryId());
	    wfTrainingCourseEventData.setEmployeeRankDesc(employee.getRankDesc());
	    wfTrainingCourseEventData.setEmployeeNumber(employee.getCategoryId().longValue() == CategoriesEnum.OFFICERS.getCode() ? String.valueOf(employee.getMilitaryNumber()) : employee.getJobCode());
	    wfTrainingCourseEventData.setEmployeePhysicalUnitFullName(employee.getPhysicalUnitFullName());
	    wfTrainingCourseEventData.setEmployeeJobName(employee.getJobDesc());
	}
	if (externalCourseEventDecisionEmployee != null) {
	    wfTrainingCourseEventData.setExternalEmployeeName(externalCourseEventDecisionEmployee.getExternalEmployeeName());
	    wfTrainingCourseEventData.setExternalEmployeeJobName(externalCourseEventDecisionEmployee.getTransEmpJobName());
	    wfTrainingCourseEventData.setExternalEmployeeNumber(externalCourseEventDecisionEmployee.getTransEmpJobCode());
	    wfTrainingCourseEventData.setExternalEmployeeRankId(externalCourseEventDecisionEmployee.getTransEmpRankId());
	    wfTrainingCourseEventData.setExternalEmployeePartyDesc(externalCourseEventDecisionEmployee.getExternalEmployeePartyDesc());
	}
	return wfTrainingCourseEventData;
    }

    public static TrainingCourseEventDecisionData constructTrainingCourseEventDecision(WFTrainingCourseEventData wfTrainingCourseEvent, TrainingCourseEventData courseEvent, long processId, String attachments, Long decisionRegionId, Long decisionApprovedId) throws BusinessException {
	TrainingCourseEventDecisionData courseEventDecision = new TrainingCourseEventDecisionData();

	courseEventDecision.setCourseEventId(wfTrainingCourseEvent.getCourseEventId());

	if (processId == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_REQUEST.getCode()) {
	    courseEventDecision.setTransactionTypeId(CommonService.getTransactionTypeByCodeAndClass(TransactionTypesEnum.TRN_COURSE_EVENT_NEW_DECISION.getCode(), TransactionClassesEnum.TRAININGS.getCode()).getId());
	    courseEventDecision.setAllowance(ETRConfigurationService.getTrainingAllowance());
	} else if (processId == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_MODIFY_REQUEST.getCode()) {
	    courseEventDecision.setTransactionTypeId(CommonService.getTransactionTypeByCodeAndClass(TransactionTypesEnum.TRN_COURSE_EVENT_MODIFY_DECISION.getCode(), TransactionClassesEnum.TRAININGS.getCode()).getId());
	    courseEventDecision.setAllowance(ETRConfigurationService.getTrainingAllowance());
	} else if (processId == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_POSTPONE_REQUEST.getCode())
	    courseEventDecision.setTransactionTypeId(CommonService.getTransactionTypeByCodeAndClass(TransactionTypesEnum.TRN_COURSE_EVENT_POSTPONE_DECISION.getCode(), TransactionClassesEnum.TRAININGS.getCode()).getId());
	else if (processId == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_CANCEL_REQUEST.getCode())
	    courseEventDecision.setTransactionTypeId(CommonService.getTransactionTypeByCodeAndClass(TransactionTypesEnum.TRN_COURSE_EVENT_CANCEL_DECISION.getCode(), TransactionClassesEnum.TRAININGS.getCode()).getId());
	else if (processId == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_RESULTS.getCode())
	    courseEventDecision.setTransactionTypeId(CommonService.getTransactionTypeByCodeAndClass(TransactionTypesEnum.TRN_COURSE_EVENT_RESULTS.getCode(), TransactionClassesEnum.TRAININGS.getCode()).getId());
	else {
	    throw new BusinessException("error_transactionDataError");
	}

	courseEventDecision.setTransStartDate(courseEvent.getActualStartDate());
	courseEventDecision.setTransEndDate(courseEvent.getActualEndDate());

	courseEventDecision.setNewStartDate(wfTrainingCourseEvent.getNewStartDate());
	courseEventDecision.setNewEndDate(wfTrainingCourseEvent.getNewEndDate());
	courseEventDecision.setReasons(wfTrainingCourseEvent.getReasons());
	courseEventDecision.setNotes(wfTrainingCourseEvent.getNotes());
	courseEventDecision.setAttachments(attachments);
	courseEventDecision.setEflag(FlagsEnum.ON.getCode());
	courseEventDecision.setMigFlag(FlagsEnum.OFF.getCode());

	courseEventDecision.setDecisionRegionId(decisionRegionId);
	courseEventDecision.setDecisionApprovedId(decisionApprovedId);
	courseEventDecision.setOriginalDecisionApprovedId(decisionApprovedId);

	courseEventDecision.setInternalCopies(wfTrainingCourseEvent.getInternalCopies());
	courseEventDecision.setExternalCopies(wfTrainingCourseEvent.getExternalCopies());

	return courseEventDecision;
    }

    public static List<TrainingCourseEventDecisionEmployee> constructTrainingCourseEventsDecisionEmployees(List<WFTrainingCourseEventData> wfTrainingCourseEvents) throws BusinessException {
	List<TrainingCourseEventDecisionEmployee> trainingCourseEventDecisionEmployeesList = new ArrayList<>();

	TrainingCourseEventDecisionEmployee trainingCourseEventDecisionEmployee;
	for (WFTrainingCourseEventData wfTrainingCourseEvent : wfTrainingCourseEvents) {
	    trainingCourseEventDecisionEmployee = new TrainingCourseEventDecisionEmployee();

	    if (wfTrainingCourseEvent.getTrainingTransactionId() != null) { // Nomination accepted Employees inside border guard
		trainingCourseEventDecisionEmployee.setTrainingTransactionId(wfTrainingCourseEvent.getTrainingTransactionId());
		trainingCourseEventDecisionEmployee.setTransEmpCategoryId(wfTrainingCourseEvent.getEmployeeCategoryId());
		trainingCourseEventDecisionEmployee.setTransEmpJobCode(wfTrainingCourseEvent.getEmployeeNumber());
		trainingCourseEventDecisionEmployee.setTransEmpJobName(wfTrainingCourseEvent.getEmployeeJobName());
		trainingCourseEventDecisionEmployee.setTransEmpRankId(EmployeesService.getEmployeeData(wfTrainingCourseEvent.getEmployeeId()).getRankId());
		trainingCourseEventDecisionEmployee.setTransEmpRankDesc(wfTrainingCourseEvent.getEmployeeRankDesc());
		trainingCourseEventDecisionEmployee.setTransEmpUnitFullName(wfTrainingCourseEvent.getEmployeePhysicalUnitFullName());
	    } else { // Employees outside border guard
		trainingCourseEventDecisionEmployee.setExternalEmployeeName(wfTrainingCourseEvent.getExternalEmployeeName());
		trainingCourseEventDecisionEmployee.setTransEmpJobCode(wfTrainingCourseEvent.getExternalEmployeeNumber());
		trainingCourseEventDecisionEmployee.setTransEmpJobName(wfTrainingCourseEvent.getExternalEmployeeJobName());
		if (wfTrainingCourseEvent.getExternalEmployeeRankId() != null) {
		    Rank externalEmployeeRank = CommonService.getRankById(wfTrainingCourseEvent.getExternalEmployeeRankId());
		    trainingCourseEventDecisionEmployee.setTransEmpRankId(wfTrainingCourseEvent.getExternalEmployeeRankId());
		    trainingCourseEventDecisionEmployee.setTransEmpRankDesc(externalEmployeeRank.getDescription());
		    trainingCourseEventDecisionEmployee.setTransEmpCategoryId(externalEmployeeRank.getCategoryId());
		}
		trainingCourseEventDecisionEmployee.setExternalEmployeePartyDesc(wfTrainingCourseEvent.getExternalEmployeePartyDesc());
	    }

	    trainingCourseEventDecisionEmployeesList.add(trainingCourseEventDecisionEmployee);
	}

	return trainingCourseEventDecisionEmployeesList;
    }

    public static TrainingCourseEventData constructCourseEventByWFTraining(WFTrainingData wfTraining) throws BusinessException {
	TrainingCourseEventData courseEvent = new TrainingCourseEventData();
	courseEvent.setCourseId(wfTraining.getCourseId());
	courseEvent.setTrainingTypeId(wfTraining.getTrainingTypeId());
	courseEvent.setTrainingUnitId(wfTraining.getTrainingUnitId());
	courseEvent.setExternalPartyId(wfTraining.getExternalPartyId());
	courseEvent.setAutoGeneratedSerialFlag(FlagsEnum.OFF.getCode());// for claims
	courseEvent.setSerial(wfTraining.getSerial());
	courseEvent.setPlannedStartDate(wfTraining.getStartDate());
	courseEvent.setPlannedEndDate(wfTraining.getEndDate());
	courseEvent.setActualStartDate(wfTraining.getStartDate());
	courseEvent.setActualEndDate(wfTraining.getEndDate());
	courseEvent.setMigFlag(FlagsEnum.OFF.getCode());
	courseEvent.setEflag(FlagsEnum.OFF.getCode());

	if (wfTraining.getTrainingTypeId() == TrainingTypesEnum.INTERNAL_MILITARY_COURSE.getCode() || wfTraining.getTrainingTypeId() == TrainingTypesEnum.EXTERNAL_MILITARY_COURSE.getCode())
	    courseEvent.setStatus(TrainingCourseEventStatusEnum.COURSE_EVENT_HELD.getCode());
	else
	    courseEvent.setStatus(TrainingCourseEventStatusEnum.PLANNED_TO_BE_HELD.getCode());

	TrainingCourseData course = TrainingCoursesService.getTrainingCoursesById(wfTraining.getCourseId());

	courseEvent.setWeeksCount(course.getWeeksCount());
	courseEvent.setCandidatesMin(course.getCandidatesMin());
	courseEvent.setCandidatesMax(course.getCandidatesMax());
	courseEvent.setPrerquisites(course.getPrerquisites());
	courseEvent.setRankingFlag(course.getRankingFlag());

	return courseEvent;
    }

    private static void closeTrainingCourseEventsWorkFlow(EmployeeData requester, WFInstance instance, List<WFTrainingCourseEventData> wfTrainingCourseEventsList, TrainingCourseEventData courseEvent, long decisionRegionId, WFTask smTask, CustomSession session) throws BusinessException {
	try {
	    List<Long> beneficairyEmployeesIds = new ArrayList<Long>();
	    List<Long> internalCopiesList = new ArrayList<Long>();
	    List<Long> additionalIds = new ArrayList<Long>();

	    if (instance.getProcessId() == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_REQUEST.getCode() || instance.getProcessId() == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_MODIFY_REQUEST.getCode()) {
		for (WFTrainingCourseEventData wfTrainingCourseEvent : wfTrainingCourseEventsList) {
		    if (wfTrainingCourseEvent.getEmployeeId() != null) {
			beneficairyEmployeesIds.add(wfTrainingCourseEvent.getEmployeeId());
			additionalIds.add(wfTrainingCourseEvent.getEmployeeId());
			EmployeeData emp = EmployeesService.getEmployeeData(wfTrainingCourseEvent.getEmployeeId());
			if (emp.getManagerId() != null)
			    additionalIds.add(emp.getManagerId());
		    }
		}
	    } else if (instance.getProcessId() == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_POSTPONE_REQUEST.getCode() || instance.getProcessId() == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_CANCEL_REQUEST.getCode()) {
		List<TrainingTransactionData> acceptedNominatedEmployeesTransactionsList = TrainingEmployeesService.getJoinedAndAcceptedEmployeesInCourseEventTransactionsList(wfTrainingCourseEventsList.get(0).getCourseEventId());
		for (TrainingTransactionData trainingTransaction : acceptedNominatedEmployeesTransactionsList) {
		    additionalIds.add(trainingTransaction.getEmployeeId());
		    EmployeeData emp = EmployeesService.getEmployeeData(trainingTransaction.getEmployeeId());
		    if (emp.getManagerId() != null)
			additionalIds.add(emp.getManagerId());
		}
	    }

	    doWFTrainingCourseEventsIntegration(wfTrainingCourseEventsList, courseEvent, instance, decisionRegionId, smTask.getOriginalId(), session);

	    List<Long> categoriesIdsList = Arrays.asList(CategoriesEnum.OFFICERS.getCode());

	    // Get all training copies (Internal copies + Computed copies)
	    // Get internal copies
	    if (wfTrainingCourseEventsList.get(0).getInternalCopies() != null) {
		String[] internalCopies = wfTrainingCourseEventsList.get(0).getInternalCopies().split(",");
		for (int i = 0; i < internalCopies.length; i++) {
		    internalCopiesList.add(Long.valueOf(internalCopies[i]));
		}
	    }

	    additionalIds.addAll(internalCopiesList);

	    // Compute all copies
	    Long[] allCopies = computeInstanceNotifications(categoriesIdsList, requester.getPhysicalRegionId(), instance.getProcessId(), beneficairyEmployeesIds, additionalIds);

	    closeWFInstanceByAction(requester.getEmpId(), instance, smTask, WFTaskActionsEnum.SUPER_SIGN.getCode(), allCopies, session);
	} catch (BusinessException e) {
	    throw e;
	} catch (Exception e) {
	    e.printStackTrace();
	    throw new BusinessException("error_general");
	}
    }

    private static void doWFTrainingCourseEventsIntegration(List<WFTrainingCourseEventData> wfTrainingCourseEventsList, TrainingCourseEventData courseEvent, WFInstance instance, long decisionRegionId, long decisionApprovedId, CustomSession session) throws BusinessException {
	if (wfTrainingCourseEventsList == null || wfTrainingCourseEventsList.isEmpty()) {
	    throw new BusinessException("error_transactionDataError");
	}

	if (instance.getProcessId().longValue() == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_RESULTS.getCode()) {

	    List<TrainingTransactionData> trainingTransactionsList = TrainingEmployeesService.getJoinedAndFininshedEmployeesInCourseEventTransactionsList(wfTrainingCourseEventsList.get(0).getCourseEventId());

	    List<TrainingTransactionDetailData> trainingTransactionsDetailsList = new ArrayList<>();
	    for (TrainingTransactionData trainingTransaction : trainingTransactionsList) {
		trainingTransactionsDetailsList.add(TrainingEmployeesWorkFlow.constructTrainingTransactionDetail(trainingTransaction.getId(), null, trainingTransaction.getEmployeeId(), decisionRegionId, decisionApprovedId, decisionApprovedId, CommonService.getTransactionTypeByCodeAndClass(TransactionTypesEnum.TRN_COURSE_EVENT_RESULTS.getCode(), TransactionClassesEnum.TRAININGS.getCode()).getId(), null, null));
	    }

	    TrainingCoursesEventsService.handleInternalTrainingCourseEventResults(trainingTransactionsList, trainingTransactionsDetailsList, courseEvent, getWFProcess(instance.getProcessId()).getProcessName(), session);
	} else {
	    int trainingTransactionCategory = getTrainingCourseEventsTransactionCategory(instance.getProcessId());

	    TrainingCourseEventDecisionData courseEventDecision = constructTrainingCourseEventDecision(wfTrainingCourseEventsList.get(0), courseEvent, instance.getProcessId(), instance.getAttachments(), decisionRegionId, decisionApprovedId);
	    List<TrainingCourseEventDecisionEmployee> trainingCourseEventDecisionEmployeesList;
	    if (instance.getProcessId().longValue() == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_REQUEST.getCode() || instance.getProcessId().longValue() == WFProcessesEnum.MILITARY_INTERNAL_COURSE_EVENT_MODIFY_REQUEST.getCode())
		trainingCourseEventDecisionEmployeesList = constructTrainingCourseEventsDecisionEmployees(wfTrainingCourseEventsList);
	    else
		trainingCourseEventDecisionEmployeesList = null;
	    TrainingCoursesEventsService.handleCourseEventDecisionRequests(courseEventDecision, trainingCourseEventDecisionEmployeesList, courseEvent, getWFProcess(instance.getProcessId()).getProcessName(), trainingTransactionCategory, session);
	}
    }

    private static List<Long> getTrainingCourseEventsInstanceBeneficiariesIds(List<WFTrainingCourseEventData> wfTrainingCourseEventsList) throws BusinessException {

	List<Long> instanceBeneficiariesIds = new ArrayList<Long>();
	for (WFTrainingCourseEventData wfTrainingCourseEvent : wfTrainingCourseEventsList) {
	    if (wfTrainingCourseEvent.getEmployeeId() != null)
		instanceBeneficiariesIds.add(wfTrainingCourseEvent.getEmployeeId());

	}

	return instanceBeneficiariesIds;
    }

    public static void deleteWFTrainingCourseEvents(WFTrainingCourseEventData wfTrainingCourseEventData, CustomSession... useSession) throws BusinessException {
	boolean isOpenedSession = isSessionOpened(useSession);
	CustomSession session = isOpenedSession ? useSession[0] : DataAccess.getSession();
	try {
	    if (!isOpenedSession)
		session.beginTransaction();

	    DataAccess.deleteEntity(wfTrainingCourseEventData.getWfTrainingCourseEvent(), session);

	    if (!isOpenedSession)
		session.commitTransaction();
	} catch (Exception e) {
	    if (!isOpenedSession)
		session.rollbackTransaction();
	    e.printStackTrace();
	    throw new BusinessException("error_general");
	} finally {
	    if (!isOpenedSession)
		session.close();
	}
    }

    public static void updateTrainingCourseEvent(TrainingCourseEventData courseEvent, int transactionCategoryId) throws BusinessException {
	if (hasCourseEventEmpsWorkFlowsAndTransactions(courseEvent)) {
	    throw new BusinessException("error_courseHasTransactionsOrWorkflows");
	}
	TrainingCoursesEventsService.updateTrainingCourseEvent(courseEvent, transactionCategoryId);
    }

    public static void deleteTrainingCourseEvent(TrainingCourseEventData courseEvent, long loginEmployeeId) throws BusinessException {
	if (hasCourseEventEmpsWorkFlowsAndTransactions(courseEvent)) {
	    throw new BusinessException("error_courseHasTransactionsOrWorkflows");
	}
	TrainingCoursesEventsService.deleteTrainingCourseEvent(courseEvent, loginEmployeeId);
    }

    private static boolean hasCourseEventEmpsWorkFlowsAndTransactions(TrainingCourseEventData courseEvent) throws BusinessException {
	if (TrainingEmployeesWorkFlow.getWFTrainingDataByCourseEventId(courseEvent.getId()).size() > 0 || TrainingEmployeesService.getTrainingTransactionsDataForCourseEventAndEmployeePhysicalUnit(null, null, courseEvent.getId(), null).size() > 0)
	    return true;
	return false;
    }

    /*---------------------------Queries------------------------------*/
    public static List<WFTrainingCourseEventData> getWFTrainingCourseEventsByInstanceId(long instanceId) throws BusinessException {
	return searchWFTrainingCourseEventsData(instanceId, null, FlagsEnum.ALL.getCode(), FlagsEnum.ALL.getCode());
    }

    public static List<WFTrainingCourseEventData> getRunningWFTrainingCoursesEventsByCourseId(long courseEventId, Long excludedInstanceId) throws BusinessException {
	return searchWFTrainingCourseEventsData(FlagsEnum.ALL.getCode(), excludedInstanceId, WFInstanceStatusEnum.RUNNING.getCode(), courseEventId);
    }

    private static List<WFTrainingCourseEventData> searchWFTrainingCourseEventsData(long instanceId, Long excludedInstanceId, int instanceStatus, long courseEventId) throws BusinessException {
	try {
	    Map<String, Object> qParams = new HashMap<String, Object>();

	    qParams.put("P_INSTANCE_ID", instanceId);
	    qParams.put("P_EXCLUDED_INSTANCE_ID", excludedInstanceId == null ? FlagsEnum.ALL.getCode() : excludedInstanceId);
	    qParams.put("P_STATUS", instanceStatus);
	    qParams.put("P_COURSE_EVENT_ID", courseEventId);

	    return DataAccess.executeNamedQuery(WFTrainingCourseEventData.class, QueryNamesEnum.HCM_SEARCH_WF_TRAINING_COURSE_EVENT_DATA.getCode(), qParams);
	} catch (DatabaseException e) {
	    e.printStackTrace();
	    throw new BusinessException("error_general");
	}
    }

    /***************************** Common *****************************/
    /*---------------------------Operations------------------------------*/
    public static EmployeeData getTrainingManager(long processId, long physicalRegionId) throws BusinessException {
	WFPosition position = null;
	if ((processId == WFProcessesEnum.TRAINING_PLAN_INITIATION.getCode() && physicalRegionId != RegionsEnum.GENERAL_DIRECTORATE_OF_BORDER_GUARDS.getCode() && physicalRegionId != RegionsEnum.ACADEMY.getCode()) || (processId == WFProcessesEnum.TRAINING_PLAN_NEEDS_REQUEST.getCode() && physicalRegionId != RegionsEnum.GENERAL_DIRECTORATE_OF_BORDER_GUARDS.getCode()))
	    position = getWFPosition(WFPositionsEnum.REGION_TRAINING_UNIT_MANAGER.getCode(), physicalRegionId);
	else
	    position = getWFPosition(WFPositionsEnum.TRAINING_PLANNING_UNIT_MANAGER.getCode(), RegionsEnum.GENERAL_DIRECTORATE_OF_BORDER_GUARDS.getCode());
	return EmployeesService.getEmployeeByPosition(position.getUnitId(), position.getEmpId());
    }

    /** * *************************** *****************************/
}
